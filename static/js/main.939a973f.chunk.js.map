{"version":3,"sources":["Indicators.js","App.js","serviceWorker.js","index.js"],"names":["library","add","faCircle","faDotCircle","Indicators","icon","_this$props","this","props","index","updatePosition","currentPosition","react_default","a","createElement","react_fontawesome_index_es","aria-label","onClick","event","Component","faAngleLeft","faAngleRight","images","App","state","position","timer","changeItem","direction","_this","setState","length","i","_this2","interval","setInterval","clearInterval","_this3","className","href","Object","toConsumableArray","Array","map","_e","src_Indicators","key","src","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.939a973f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCircle, faDotCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(faCircle, faDotCircle)\r\n\r\nclass Indicators extends Component {\r\n    static propTypes = {\r\n        index: PropTypes.number.isRequired,\r\n        updatePosition: PropTypes.func.isRequired,\r\n        currentPosition: PropTypes.number.isRequired\r\n    }\r\n    render() {\r\n      const { index, updatePosition, currentPosition } = this.props\r\n      let icon\r\n      // if the current position matches the index, it will be marked\r\n      if (currentPosition === index) {\r\n        icon = <FontAwesomeIcon icon=\"dot-circle\" />\r\n      } else {\r\n        icon = <FontAwesomeIcon icon=\"circle\" />\r\n      }\r\n      return (\r\n        <li><button aria-label={index} onClick={(event) => updatePosition(index)}>{icon}</button></li>\r\n      )\r\n    }\r\n  }\r\nexport default Indicators","import React, { Component } from 'react'\nimport Indicators from './Indicators'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faAngleLeft, faAngleRight } from '@fortawesome/free-solid-svg-icons'\nimport './main.css'; \n\n// add FontAwesome Libraries\nlibrary.add(faAngleLeft, faAngleRight)\n// load up the image urls\nconst images = [\"img/dikaseva-34881-unsplash.jpg\", \n\"img/mark-basarab-122141-unsplash.jpg\", \n\"img/milada-vigerova-35578-unsplash.jpg\",\n\"img/riccardo-chiarini-365677-unsplash.jpg\",\n\"img/thomas-morse-349005-unsplash.jpg\"\n]\n\nclass App extends Component {\n  state = {\n    position: 0,\n    timer: 0\n  }\n  componentDidMount() {\n    // We will also make the images automatically slide every 6 seconds. Timer is reset on slideshow changes.\n    this.interval = setInterval(() => {\n      this.setState({timer: this.state.timer + 1})\n      if (this.state.timer === 6) {\n        this.changeItem(\"next\")\n      }\n    }, 1000)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n/**\n * changeItem updates the index of the current slide by going backward or forward\n * @param direction Direction of the slider (\"prev\" or \"next\")\n */\n  changeItem = (direction) => {\n    switch(direction) {\n      // previous image\n      case \"prev\":\n        this.setState({position: this.state.position - 1, timer: 0})\n        // if the position is less than or equal to 0, set it to the image count minus 1 (for offset)\n        if (this.state.position <= 0) {\n          this.setState({position: images.length - 1})\n        }\n        break\n      // next image\n      case \"next\":\n        this.setState({position: this.state.position + 1, timer: 0})\n        // if the position is greater than or equal to the image count, then set it to zero\n        if (this.state.position >= images.length - 1) {\n          this.setState({position: 0, timer: 0})\n        }\n        break\n        default:\n      }\n    }\n  /**\n   * updatePosition updates the index of the current slide by going backward or forward. Will be carried over as a prop.\n   * @param i Index of the slide\n   */\n  updatePosition = (i) => {\n    this.setState({position: i, timer: 0})\n  }\n  render() {\n    const { position } = this.state;\n    return (\n      <div className=\"App\">\n        <section className=\"container\" aria-label=\"Image Carousel\">\n        <h1>Image Carousel (React)</h1>\n        <a href=\"carousel-2.html\">Javascript Verson</a> <br />\n          <div className=\"carousel\">\n              <button className=\"button-previous\" aria-label=\"Previous Slide\" onClick={(event) => this.changeItem(\"prev\")}><FontAwesomeIcon icon=\"angle-left\" /></button>\n              <button className=\"button-next\" aria-label=\"Next Slide\" onClick={(event) => this.changeItem(\"next\")}><FontAwesomeIcon icon=\"angle-right\" /></button>\n            <ul className=\"indicators\">\n            {[...Array(images.length)].map((_e, i) => \n              <Indicators key={i} index={i} updatePosition={this.updatePosition} currentPosition={position} />\n            )}\n            </ul>\n            <div className=\"item\">\n              {images.map((images, index) => (\n                <div key={index} className={position === index ? \"carousel-item fade active\" : \"carousel-item fade\"}><img src={images} alt={\"Image \" + index}/></div>\n              ))}\n            </div>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}